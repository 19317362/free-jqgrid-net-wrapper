// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 14.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace JqGridWrapper.T4
{
    using JqGridWrapper;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\lkriz\Documents\Visual Studio 2015\Projects\GridClient\JqGridWrapper\T4\JqGridServerJson.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public partial class JqGridServerJson : JqGridServerJsonBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"


$(document).ready(function () {
    // Get data and display in grid.
    $(""#mygrid"").jqGrid({
		autoencode: true, // prevents XSS. 
		viewrecords: true, // shows the N records of M count in the nav bar.
		gridview: true, // speed up rendering; if set to true we can not use treeGrid, subGrid, or the afterInsertRow event.        
		hidegrid: false, // removes the button that toggles the grid show/hide (top-right corner).
		guiStyle: ""bootstrap"",
		iconSet: ""fontAwesome"",
		jsonReader: { // map incoming JSON data to the key properties of jqGrid.
			root: ""Items"",
			page: ""CurrentPage"",
			total: ""TotalPages"",
			records: ""TotalRecords"",
			repeatitems: false, // maps columns to properties by name; if true maps by position.
			id: ""0"", // autogenerated ID number. Can be set to unique property of model data.
			subgrid: {
				root: ""Items"",
				page: ""CurrentPage"",
				total: ""TotalPages"",
				records: ""TotalRecords"",
				repeatitems: false,
				id: ""0""
			}
		},
		prmNames: { // overrides default paramter names sent to server; this works for both GET and POST methods.
			sort: ""orderby"",
			order: ""sortorder""
		},
		altclass: ""otherrow"", // sets class for alternate rows. Only works when altRows set to true.
		altRows: true, // enables alternate row styles.
		rowNum: 10, // init page size.
		rowList: [5, 10, 15],
        url: """);
            
            #line 42 "C:\Users\lkriz\Documents\Visual Studio 2015\Projects\GridClient\JqGridWrapper\T4\JqGridServerJson.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Options.Url));
            
            #line default
            #line hidden
            this.Write("\",\r\n        datatype: \"json\",\r\n        mtype: \"GET\", // HTTP method.\r\n        col" +
                    "Names: [\"PERM ID\", \"ICN\", \"Category\", \"Source\", \"DP Status\", \"MR Status\", \"\"],\r\n" +
                    "        colModel: [\r\n            ");
            
            #line 47 "C:\Users\lkriz\Documents\Visual Studio 2015\Projects\GridClient\JqGridWrapper\T4\JqGridServerJson.tt"
 foreach (var column in Columns) 
			{ 
            
            #line default
            #line hidden
            this.Write("\t\t\t{ name: \"");
            
            #line 49 "C:\Users\lkriz\Documents\Visual Studio 2015\Projects\GridClient\JqGridWrapper\T4\JqGridServerJson.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.Name));
            
            #line default
            #line hidden
            this.Write("\", width: ");
            
            #line 49 "C:\Users\lkriz\Documents\Visual Studio 2015\Projects\GridClient\JqGridWrapper\T4\JqGridServerJson.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.Width));
            
            #line default
            #line hidden
            this.Write(", labelAlign: \"");
            
            #line 49 "C:\Users\lkriz\Documents\Visual Studio 2015\Projects\GridClient\JqGridWrapper\T4\JqGridServerJson.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(((Enum)column.LabelAlign).ToString()));
            
            #line default
            #line hidden
            this.Write("\", align: \"");
            
            #line 49 "C:\Users\lkriz\Documents\Visual Studio 2015\Projects\GridClient\JqGridWrapper\T4\JqGridServerJson.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(((Enum)column.TextAlign).ToString()));
            
            #line default
            #line hidden
            this.Write("\"  },\r\n\t\t\t");
            
            #line 50 "C:\Users\lkriz\Documents\Visual Studio 2015\Projects\GridClient\JqGridWrapper\T4\JqGridServerJson.tt"
} 
            
            #line default
            #line hidden
            this.Write("        ],\r\n        pager: \"#mygridnavbar\",                      \r\n        //capt" +
                    "ion: \"Test grid\",        \r\n        //multiselect: true, // adds check box column" +
                    " to select more than one row at once.\r\n        //multiPageSelection: true, // al" +
                    "lows multiple selection across multiple pages. Looks like it only works with loc" +
                    "al data.\r\n        toolbar: [true, \"both\"], // add toolbar to the top and bottom " +
                    "of the grid. Other values are \'top\', \'bottom\'.\r\n        subGrid: true, // adds c" +
                    "olumn with plus sign to expand subgrid.\r\n        subGridRowExpanded: function (p" +
                    "ID, id) { // allows to add custom html into the subgrid area. Use to provide cus" +
                    "tom detail view!\r\n            $(\"#\" + pID).append($(\"#detail\").html());\r\n       " +
                    " },\r\n        actionsNavOptions: {\r\n            editbutton: false,\r\n            d" +
                    "elbutton: false,\r\n            coversheeticon: \"fa-fax\",\r\n            coversheett" +
                    "itle: \"Download coversheet\",\r\n            detailicon: \"fa-file-o\",\r\n            " +
                    "detailtitle: \"View claim detail\",\r\n            disputeicon: \"fa-pencil-square-o\"" +
                    ",\r\n            disputetitle: \"Request Difference Resolution\",\r\n            custo" +
                    "m: [\r\n                {\r\n                    action: \"detail\", position: \"first\"" +
                    ",\r\n                    onClick: function (options) {\r\n                        al" +
                    "ert(\"Viewing claim detail..., rowid=\" + options.rowid);\r\n                    }\r\n" +
                    "                },\r\n                {\r\n                    action: \"dispute\",\r\n " +
                    "                   onClick: function (options) {\r\n                        alert(" +
                    "\"Requesting DR..., rowid=\" + options.rowid);\r\n                    }\r\n           " +
                    "     },\r\n                {\r\n                    action: \"coversheet\", position: " +
                    "\"last\",\r\n                    onClick: function (options) {\r\n                    " +
                    "    alert(\"Generating coversheet..., rowid=\" + options.rowid);\r\n                " +
                    "    }\r\n                }\r\n            ]\r\n        }\r\n    });\r\n\r\n    $(\"#mygrid\")." +
                    "jqGrid(\"navGrid\", \"#mygridnavbar\", {\r\n        refresh: false,\r\n        search: f" +
                    "alse,\r\n        view: false,\r\n        edit: false,\r\n        add: false,\r\n        " +
                    "del: false\r\n    });\r\n\r\n    $(\"#mygrid\").jqGrid(\"navButtonAdd\", \"#mygridnavbar\", " +
                    "{\r\n        caption: \"Excel\",\r\n        title: \"Excel\",\r\n        onClickButton: fu" +
                    "nction () { alert(\'Downloading to Excel\'); },\r\n        position: \"last\",\r\n      " +
                    "  buttonicon: \"fa fa-file-excel-o\"\r\n    });\r\n});\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public class JqGridServerJsonBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
